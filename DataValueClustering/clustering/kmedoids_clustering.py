'''Apply k-medoids clustering algorithm.'''
from sklearn_extra.cluster import KMedoids

from clustering import hierarchical_clustering
import numpy as np


# method_array = [ # not supported by KMedoids anymore
#     # dependencies, not-dependencies, value
#     # suggest value if none of the 'not-dependencies' questions were answered with True
#
#     [[], [0], "pam"],
#     [[], [], "alternate"],
#
# ]
MAX_ITER = "max_iter"
HEURISTIC = "heuristic"

initialization_array = np.array([
    # dependencies, not-dependencies, value
    # suggest value if none of the 'not-dependencies' questions were answered with True

    [[], [1],   "random",       "Random selection of n_clusters points as medoids."],
    [[], [0],   "heuristic",    "Picks the n_clusters points with the smallest sum distance to every other point."],
    [[], [0, 1], "k-medoids++", "Gives initial medoids which are more separated than those generated by the other methods."],
    # [[], [0],   "build",        "Greedy initialization of the medoids used in the original PAM algorithm. More effective but slower than other initializations. Very non-robust concerning outliers."],  # not supported by KMedoids anymore

], dtype=object)


def kmedoids(distance_matrix, values, n_clusters=8, init='heuristic', max_iter=200):  # method not supported anymore
    clusters = KMedoids(metric='precomputed', n_clusters=n_clusters, init=init, max_iter=max_iter).fit_predict(distance_matrix)
    return clusters


def kmedoids_args(n_clusters=8, init='heuristic', max_iter=200):
    return lambda distance_matrix_map, values: kmedoids(distance_matrix_map["distance_matrix"], values,
                                                        n_clusters, init, max_iter)


def kmedoids_n_clusters_config(no_values):
    # int or range
    name, explanation, min_n_clusters, max_n_clusters, suggestion_value, resolution, deactivatable, default_active = hierarchical_clustering.hierarchical_n_clusters_config(no_values)
    return name, explanation, min_n_clusters, max_n_clusters, suggestion_value, resolution


# def kmedoids_method_config():
#     # not supported by KMedoids anymore
#     pass


def kmedoids_init_config():
    # enum
    # expert
    name = HEURISTIC
    explanation = "Initialization method for medoids."
    options = initialization_array[:, (2, 3)]
    suggestion = "heuristic"

    return name, explanation, options, suggestion


def kmedoids_max_iter_config():
    # int
    # expert
    name = MAX_ITER
    explanation = "Maximum number of iterations. Higher values will yield longer runtimes. In case of zero, only the initialization is computed."
    mini = 0
    maxi = 1000  # TODO
    default = 300
    resolution = 1
    deactivatable = False
    return name, explanation, mini, maxi, default, resolution, deactivatable